<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间对应要映射的dao接口的全限定名 -->
<mapper namespace="com.cheney.dao.mybatis.AuthUserMapper">

    <resultMap id="base" type="com.cheney.entity.AuthUser">
        <id property="id" column="id"/>
        <result property="createDate" column="createDate"/>
        <result property="enabled" column="enabled"/>
        <result property="originId" column="originId"/>
        <result property="password" column="password"/>
        <result property="updateDate" column="updateDate"/>
        <result property="username" column="username"/>
    </resultMap>

    <sql id="filters">
        <where>
            <foreach collection="filters" item="filter" separator="and">
                <if test="filter.symbol != 'is null' and filter.symbol != 'is not null' and filter.symbol != 'in'">
                    ${filter.property} ${filter.symbol} #{filter.value}
                </if>
                <if test="filter.symbol == 'is null' or filter.symbol == 'is not null'">
                    ${filter.property} ${filter.symbol}
                </if>
                <if test="filter.symbol == 'in'">
                    ${filter.property}
                    in
                    <foreach collection="filter.value" item="item" separator="," open="(" close=")">
                        #{item}
                    </foreach>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="pageFilters">
        <where>
            <foreach collection="pageable.filters" item="filter" separator="and">
                <if test="filter.symbol != 'is null' and filter.symbol != 'is not null' and filter.symbol != 'in'">
                    ${filter.property} ${filter.symbol} #{filter.value}
                </if>
                <if test="filter.symbol == 'is null' or filter.symbol == 'is not null'">
                    ${filter.property} ${filter.symbol}
                </if>
                <if test="filter.symbol == 'in'">
                    ${filter.property}
                    in
                    <foreach collection="filter.value" item="item" separator="," open="(" close=")">
                        #{item}
                    </foreach>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="orders">
      <if test="orders != null and orders.valid == true">
          order by
          <foreach collection="orders.orders" separator="," item="_order">
              ${_order.property} #{_order.type}
          </foreach>
      </if>
    </sql>

    <sql id="pageOrders">
        <if test="pageable.orders != null and pageable.orders.valid == true">
            order by
            <foreach collection="pageable.orders.orders" separator="," item="_order">
                ${_order.property} #{_order.type}
            </foreach>
        </if>
    </sql>

    <resultMap id="page" type="com.cheney.system.page.Page">
        <result property="total" column="count"/>
        <result property="pageSize" column="pageSize"/>
        <result property="pageNumber" column="pageNumber"/>
        <collection property="content" ofType="com.cheney.entity.AuthUser" >
            <id property="id" column="id"/>
        <result property="createDate" column="createDate"/>
        <result property="enabled" column="enabled"/>
        <result property="originId" column="originId"/>
        <result property="password" column="password"/>
        <result property="updateDate" column="updateDate"/>
        <result property="username" column="username"/>
        </collection>
    </resultMap>

    <select id="find" parameterType="Long" resultMap="base">
        select *
        from sys_auth_user
        where id = #{id}
    </select>

    <select id="filter" resultMap="base">
        select *
        from sys_auth_user
        <include refid="filters"/>
    </select>

    <select id="findAll" resultMap="base">
        select *
        from sys_auth_user
    </select>

    <insert id="persist" parameterType="com.cheney.entity.AuthUser" useGeneratedKeys="true" keyProperty="id">
        insert into sys_auth_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="createDate != null">
			createDate,
		</if>
		<if test="enabled != null">
			enabled,
		</if>
		<if test="originId != null">
			originId,
		</if>
		<if test="password != null">
			password,
		</if>
		<if test="updateDate != null">
			updateDate,
		</if>
		<if test="username != null">
			username
		</if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
		<if test="createDate != null">
			#{createDate},
		</if>
		<if test="enabled != null">
			#{enabled},
		</if>
		<if test="originId != null">
			#{originId},
		</if>
		<if test="password != null">
			#{password},
		</if>
		<if test="updateDate != null">
			#{updateDate},
		</if>
		<if test="username != null">
			#{username}
		</if>
        </trim>
    </insert>

    <update id="merge" parameterType="com.cheney.entity.AuthUser">
        update sys_auth_user
        set
        <trim suffixOverrides=",">
		<if test="createDate != null">
			createDate = #{createDate},
		</if>
		<if test="enabled != null">
			enabled = #{enabled},
		</if>
		<if test="originId != null">
			originId = #{originId},
		</if>
		<if test="password != null">
			password = #{password},
		</if>
		<if test="updateDate != null">
			updateDate = #{updateDate},
		</if>
		<if test="username != null">
			username = #{username}
		</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="remove" parameterType="Long">
        delete from sys_auth_user where id = #{id}
    </delete>

    <delete id="multiRemove" parameterType="Long">
        delete from sys_auth_user
        where id in
        <foreach item="id" collection="ids" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <select id="findPage" parameterType="com.cheney.system.page.Pageable" resultMap="page">
        select
        #{pageable.pageSize} as pageSize
        ,#{pageable.pageNumber} as pageNumber
        ,(select count(*) from sys_auth_user<include refid="pageFilters"/>) as count
        ,t1.*
        from sys_auth_user t1
        <include refid="pageFilters"/>
        <include refid="pageOrders"/>
        limit #{pageable.startSize},#{pageable.pageSize}
    </select>

    <select id="findList" resultType="com.cheney.entity.AuthUser">
        select *
        from sys_auth_user
        <include refid="filters"/>
        <include refid="orders"/>
    </select>

    <select id="count" resultType="Long">
        select count(1)
        from sys_auth_user
        <include refid="filters"/>
    </select>

    <select id="findByUsername" resultType="com.cheney.entity.AuthUser">
        select *
        from sys_auth_user
        where username = #{username}
    </select>


</mapper>
