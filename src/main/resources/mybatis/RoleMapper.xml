<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间对应要映射的dao接口的全限定名 -->
<mapper namespace="com.cheney.dao.mybatis.RoleMapper">

    <resultMap id="base" type="com.cheney.entity.Role">
        <id property="id" column="id"/>
        <result property="code" column="code"/>
        <result property="createDate" column="create_date"/>
        <result property="name" column="name"/>
        <result property="updateDate" column="update_date"/>
        <collection property="urlPatterns" ofType="string">
            <result column="url_pattern"/>
        </collection>
    </resultMap>

    <sql id="filters">
        <include refid="commonFilters"/>
    </sql>

    <sql id="pageFilters">
        <bind name="filters" value="pageable.filters"/>
        <include refid="commonFilters"/>
    </sql>

    <sql id="commonFilters">
        <where>
            <if test="filters != null">
                <foreach collection="filters.filters" item="filterSegment" index="idx">
                    ${filterSegment.connection}
                    <if test="idx != 0">
                        (
                    </if>
                    <foreach collection="filterSegment.filter.linkToList" item="filter">
                        ${filter.connectionSymbol}
                        <choose>
                            <when test="filter.symbol == 'is null' or filter.symbol == 'is not null'">
                                ${filter.property} ${filter.symbol}
                            </when>
                            <when test="filter.symbol == 'in'">
                                ${filter.property}
                                in
                                <foreach collection="filter.value" item="item" separator="," open="(" close=")">
                                    #{item}
                                </foreach>
                            </when>
                            <otherwise>
                                ${filter.property} ${filter.symbol} #{filter.value}
                            </otherwise>
                        </choose>
                    </foreach>
                    <if test="idx != 0">
                        )
                    </if>
                </foreach>
                <if test="filters.hasOtherParams == true">
                    <bind name="_others" value="filters.otherParams"/>
                </if>
            </if>
        </where>
    </sql>

    <sql id="orders">
      <if test="orders != null and orders.valid == true">
          order by
          <foreach collection="orders.orders" separator="," item="_order">
              ${_order.property} ${_order.type}
          </foreach>
      </if>
    </sql>

    <sql id="pageOrders">
        <if test="pageable.orders != null and pageable.orders.valid == true">
            order by
            <foreach collection="pageable.orders.orders" separator="," item="_order">
                ${_order.property} ${_order.type}
            </foreach>
        </if>
    </sql>

    <insert id="persist" parameterType="com.cheney.entity.Role" useGeneratedKeys="true" keyProperty="id">
        insert into sys_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="code != null">
                code,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="updateDate != null">
                update_date
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="code != null">
                #{code},
            </if>
            <if test="createDate != null">
                #{createDate},
            </if>
            <if test="name != null">
                #{name},
            </if>
            <if test="updateDate != null">
                #{updateDate}
            </if>
        </trim>
    </insert>

    <update id="merge" parameterType="com.cheney.entity.Role">
        update sys_role
        set
        <trim suffixOverrides=",">
            <if test="code != null">
                code = #{code},
            </if>
            <if test="createDate != null">
                create_date = #{createDate},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate}
            </if>
        </trim>
        where id = #{id}
    </update>

    <delete id="remove" parameterType="Long">
        delete from sys_role where id = #{id}
    </delete>

    <delete id="multiRemove" parameterType="Long">
        delete from sys_role
        where id in
        <foreach item="id" collection="ids" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <select id="find" parameterType="Long" resultMap="base">
        select t0.*,sa.url_pattern
        from sys_role t0
        left join mid_role_auth mid on t0.code = mid.role_code
        left join sys_auth sa on mid.auth_code = sa.code
        where t0.id = #{id}
    </select>

    <select id="filter" resultMap="base">
        select t0.*,sa.url_pattern
        from sys_role t0
        left join mid_role_auth mid on t0.code = mid.role_code
        left join sys_auth sa on mid.auth_code = sa.code
        <include refid="filters"/>
    </select>

    <select id="findAll" resultMap="base">
        select t0.*,sa.url_pattern
        from sys_role t0
        left join mid_role_auth mid on t0.code = mid.role_code
        left join sys_auth sa on mid.auth_code = sa.code
    </select>

    <select id="findList" resultMap="base">
        select t0.*,sa.url_pattern
        from sys_role t0
        left join mid_role_auth mid on t0.code = mid.role_code
        left join sys_auth sa on mid.auth_code = sa.code
        <include refid="filters"/>
        <include refid="orders"/>
    </select>

    <select id="count" resultType="long">
        select count(1)
        from sys_role t0
        <include refid="filters"/>
    </select>

    <select id="exists" resultType="integer">
        select 1
        from sys_role t0
        <include refid="filters"/>
        limit 1
    </select>

    <select id="findPage" parameterType="cn.cheny.toolbox.other.page.Pageable" resultMap="base">
        select t0.*,
        sa.url_pattern
        from
        (select distinct t0.*
        from sys_role t0
        left join mid_role_auth mid on t0.code = mid.role_code
        left join sys_auth sa on mid.auth_code = sa.code
        <include refid="pageFilters"/>
        <include refid="pageOrders"/>
        limit #{pageable.startSize},#{pageable.pageSize}) t0
        left join mid_role_auth mid on t0.code = mid.role_code
        left join sys_auth sa on mid.auth_code = sa.code
    </select>

</mapper>
