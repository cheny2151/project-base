<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间对应要映射的dao接口的全限定名 -->
<mapper namespace="@{namespace}">

    <resultMap id="base" type="@{package}">
        @{resultMap}
    </resultMap>

    <sql id="filters">
        <where>
            <foreach collection="filters" item="filter" separator="and">
                <if test="filter.symbol != 'is null' and filter.symbol != 'is not null' and filter.symbol != 'in'">
                    ${filter.property} ${filter.symbol} #{filter.value}
                </if>
                <if test="filter.symbol == 'is null' or filter.symbol == 'is not null'">
                    ${filter.property} ${filter.symbol}
                </if>
                <if test="filter.symbol == 'in'">
                    ${filter.property}
                    in
                    <foreach collection="filter.value" item="item" separator="," open="(" close=")">
                        #{item}
                    </foreach>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="pageFilters">
        <where>
            <foreach collection="pageable.filters" item="filter" separator="and">
                <if test="filter.symbol != 'is null' and filter.symbol != 'is not null' and filter.symbol != 'in'">
                    ${filter.property} ${filter.symbol} #{filter.value}
                </if>
                <if test="filter.symbol == 'is null' or filter.symbol == 'is not null'">
                    ${filter.property} ${filter.symbol}
                </if>
                <if test="filter.symbol == 'in'">
                    ${filter.property}
                    in
                    <foreach collection="filter.value" item="item" separator="," open="(" close=")">
                        #{item}
                    </foreach>
                </if>
            </foreach>
        </where>
    </sql>

    <sql id="orders">
      <if test="order != null">
          order by
          <foreach collection="order.properties" separator="," item="property">
              ${property}
          </foreach>
          ${order.type}
      </if>
    </sql>

    <sql id="pageOrders">
        <if test="pageable.order != null">
            order by
            <foreach collection="pageable.order.properties" separator="," item="property">
                ${property}
            </foreach>
            ${pageable.order.type}
        </if>
    </sql>

    <resultMap id="page" type="com.cheney.system.page.Page">
        <result property="total" column="count"/>
        <result property="pageSize" column="pageSize"/>
        <result property="pageNumber" column="pageNumber"/>
        <collection property="content" ofType="@{package}" >
            @{resultMap}
        </collection>
    </resultMap>

    <select id="find" parameterType="@{idType}" resultMap="base">
        select *
        from @{tableName}
        where @{idColumn} = #{id}
    </select>

    <select id="findAll" resultMap="base">
        select *
        from @{tableName}
    </select>

    <insert id="persist" parameterType="@{package}">
        insert into @{tableName} (
@{cloumns}
        )
        values(
@{columnValues}
        )
    </insert>

    <update id="merge" parameterType="@{package}">
        update @{tableName}
        set
@{setValue}
        where @{idColumn} = #{id}
    </update>

    <delete id="remove" parameterType="@{idType}">
        delete from @{tableName} where @{idColumn} = #{id}
    </delete>

    <delete id="multiRemove" parameterType="@{idType}">
        delete from @{tableName}
        where @{idColumn} in
        <foreach item="id" collection="ids" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <select id="findPage" parameterType="com.cheney.system.page.Pageable" resultMap="page">
        select
        #{pageable.pageSize} as pageSize
        ,#{pageable.pageNumber} as pageNumber
        ,(select count(*) from @{tableName}<include refid="pageFilters"/>) as count
        ,t1.*
        from @{tableName} t1
        <include refid="pageFilters"/>
        <include refid="pageOrders"/>
        limit #{pageable.startSize},#{pageable.pageSize}
    </select>

    <select id="findList" resultType="@{package}">
        select *
        from @{tableName}
        <include refid="filters"/>
        <include refid="orders"/>
    </select>

</mapper>