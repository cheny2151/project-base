<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间对应要映射的dao接口的全限定名 -->
<mapper namespace="@{namespace}">

    <resultMap id="base" type="@{package}">
        @{resultMap}
    </resultMap>

    <resultMap id="page" type="com.cheney.system.page.Page">
        <result property="total" column="count"/>
        <result property="pageSize" column="pageSize"/>
        <result property="pageNumber" column="pageNumber"/>
        <collection property="content" ofType="@{package}" >
            @{resultMap}
        </collection>
    </resultMap>

    <sql id="filters">
        <include refid="commonFilters"/>
    </sql>

    <sql id="pageFilters">
        <bind name="filters" value="pageable.filters"/>
        <include refid="commonFilters"/>
    </sql>

    <sql id="commonFilters">
        <where>
            <if test="filters != null">
                <foreach collection="filters" item="filter" separator="and">
                    <choose>
                        <when test="filter.symbol == 'is null' or filter.symbol == 'is not null'">
                            t0.${filter.property} ${filter.symbol}
                        </when>
                        <when test="filter.symbol == 'in'">
                            t0.${filter.property}
                            in
                            <foreach collection="filter.value" item="item" separator="," open="(" close=")">
                                #{item}
                            </foreach>
                        </when>
                        <otherwise>
                            t0.${filter.property} ${filter.symbol} #{filter.value}
                        </otherwise>
                    </choose>
                </foreach>
                <if test="filters.hasOtherParams == true">
                    <bind name="_others" value="filters.otherParams"/>
                </if>
            </if>
        </where>
    </sql>

    <sql id="orders">
      <if test="orders != null and orders.valid == true">
          order by
          <foreach collection="orders.orders" separator="," item="_order">
              t0.${_order.property} ${_order.type}
          </foreach>
      </if>
    </sql>

    <sql id="pageOrders">
        <if test="pageable.orders != null and pageable.orders.valid == true">
            order by
            <foreach collection="pageable.orders.orders" separator="," item="_order">
                t0.${_order.property} ${_order.type}
            </foreach>
        </if>
    </sql>

    <insert id="persist" parameterType="@{package}" useGeneratedKeys="true" keyProperty="id">
        insert into @{tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
@{cloumns}
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
@{columnValues}
        </trim>
    </insert>

    <update id="merge" parameterType="@{package}">
        update @{tableName}
        set
        <trim suffixOverrides=",">
@{setValue}
        </trim>
        where @{idColumn} = @{idField}
    </update>

    <delete id="remove" parameterType="@{idType}">
        delete from @{tableName} where @{idColumn} = #{id}
    </delete>

    <delete id="multiRemove" parameterType="@{idType}">
        delete from @{tableName}
        where @{idColumn} in
        <foreach item="id" collection="ids" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

     <select id="find" parameterType="@{idType}" resultMap="base">
        select *
        from @{tableName}
        where @{idColumn} = #{id}
    </select>

    <select id="filter" resultMap="base">
        select *
        from @{tableName} t0
        <include refid="filters"/>
    </select>

    <select id="findAll" resultMap="base">
        select *
        from @{tableName} t0
    </select>

    <select id="findList" resultMap="base">
        select *
        from @{tableName} t0
        <include refid="filters"/>
        <include refid="orders"/>
    </select>

    <select id="count" resultType="long">
        select count(1)
        from @{tableName} t0
        <include refid="filters"/>
    </select>

    <select id="findPage" parameterType="com.cheney.system.page.Pageable" resultMap="page">
        select
        #{pageable.pageSize} as pageSize,
        #{pageable.pageNumber} as pageNumber,
        (select count(*) from @{tableName}<include refid="pageFilters"/>) as count,
        t0.*
        from @{tableName} t0
        <include refid="pageFilters"/>
        <include refid="pageOrders"/>
        limit #{pageable.startSize},#{pageable.pageSize}
    </select>

</mapper>
